//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Finocart_Scheduler
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FinocartEntities : DbContext
    {
        public FinocartEntities()
            : base("name=FinocartEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Admin> Admin { get; set; }
        public virtual DbSet<AnchorCompanies> AnchorCompanies { get; set; }
        public virtual DbSet<AnchorCompanyDocument> AnchorCompanyDocument { get; set; }
        public virtual DbSet<AnchorNotification> AnchorNotification { get; set; }
        public virtual DbSet<AutoFundingRate> AutoFundingRate { get; set; }
        public virtual DbSet<Company> Company { get; set; }
        public virtual DbSet<CompanyDocuments> CompanyDocuments { get; set; }
        public virtual DbSet<EmailTemplate> EmailTemplate { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<ErrorTracer> ErrorTracer { get; set; }
        public virtual DbSet<FinocartMaster> FinocartMaster { get; set; }
        public virtual DbSet<Invoice> Invoice { get; set; }
        public virtual DbSet<InvoiceApprovalOrder> InvoiceApprovalOrder { get; set; }
        public virtual DbSet<InvoiceJourneyHistory> InvoiceJourneyHistory { get; set; }
        public virtual DbSet<LogManagement> LogManagement { get; set; }
        public virtual DbSet<LookupDetails> LookupDetails { get; set; }
        public virtual DbSet<ModuleMaster> ModuleMaster { get; set; }
        public virtual DbSet<Notification> Notification { get; set; }
        public virtual DbSet<ProcedureErrorTracer> ProcedureErrorTracer { get; set; }
        public virtual DbSet<RolesAccessMaster> RolesAccessMaster { get; set; }
        public virtual DbSet<SAPConfiguration> SAPConfiguration { get; set; }
        public virtual DbSet<SearchHistory> SearchHistory { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<Vendor> Vendor { get; set; }
        public virtual DbSet<VendorAssociatedCompany> VendorAssociatedCompany { get; set; }
        public virtual DbSet<VendorDiscMap> VendorDiscMap { get; set; }
        public virtual DbSet<VendorDocument> VendorDocument { get; set; }
        public virtual DbSet<BucketManagement> BucketManagement { get; set; }
        public virtual DbSet<InvoiceBucket> InvoiceBucket { get; set; }
        public virtual DbSet<SetBankAmountLimit> SetBankAmountLimit { get; set; }
        public virtual DbSet<HolidayList> HolidayList { get; set; }
    
        [DbFunction("FinocartEntities", "fn_udfGetInvoiceJourneyForEligibleInv")]
        public virtual IQueryable<fn_udfGetInvoiceJourneyForEligibleInv_Result> fn_udfGetInvoiceJourneyForEligibleInv(Nullable<long> invoiceId)
        {
            var invoiceIdParameter = invoiceId.HasValue ?
                new ObjectParameter("InvoiceId", invoiceId) :
                new ObjectParameter("InvoiceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_udfGetInvoiceJourneyForEligibleInv_Result>("[FinocartEntities].[fn_udfGetInvoiceJourneyForEligibleInv](@InvoiceId)", invoiceIdParameter);
        }
    
        [DbFunction("FinocartEntities", "SplitString")]
        public virtual IQueryable<SplitString_Result> SplitString(string input, string character)
        {
            var inputParameter = input != null ?
                new ObjectParameter("Input", input) :
                new ObjectParameter("Input", typeof(string));
    
            var characterParameter = character != null ?
                new ObjectParameter("Character", character) :
                new ObjectParameter("Character", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitString_Result>("[FinocartEntities].[SplitString](@Input, @Character)", inputParameter, characterParameter);
        }
    
        public virtual ObjectResult<GetFunding_Result> GetFunding(Nullable<long> autoFudngId)
        {
            var autoFudngIdParameter = autoFudngId.HasValue ?
                new ObjectParameter("AutoFudngId", autoFudngId) :
                new ObjectParameter("AutoFudngId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFunding_Result>("GetFunding", autoFudngIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> IsEmailExistOrNot2(string emailID)
        {
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("IsEmailExistOrNot2", emailIDParameter);
        }
    
        public virtual ObjectResult<poc_getAnchorCompDropDown_Result> poc_getAnchorCompDropDown(Nullable<long> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<poc_getAnchorCompDropDown_Result>("poc_getAnchorCompDropDown", vendorIDParameter);
        }
    
        public virtual ObjectResult<poc_getEmployeeData_Result> poc_getEmployeeData(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<poc_getEmployeeData_Result>("poc_getEmployeeData", idParameter);
        }
    
        public virtual ObjectResult<poc_getVendorDropDown_Result> poc_getVendorDropDown(Nullable<long> anchorCompID)
        {
            var anchorCompIDParameter = anchorCompID.HasValue ?
                new ObjectParameter("AnchorCompID", anchorCompID) :
                new ObjectParameter("AnchorCompID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<poc_getVendorDropDown_Result>("poc_getVendorDropDown", anchorCompIDParameter);
        }
    
        public virtual ObjectResult<Pro_GetInvoiceListAwaiteApproval_Result> Pro_GetInvoiceListAwaiteApproval(Nullable<long> skip, Nullable<int> pageSize, string sortBy, string company_name, string totalInvoiceAmount)
        {
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var company_nameParameter = company_name != null ?
                new ObjectParameter("Company_name", company_name) :
                new ObjectParameter("Company_name", typeof(string));
    
            var totalInvoiceAmountParameter = totalInvoiceAmount != null ?
                new ObjectParameter("TotalInvoiceAmount", totalInvoiceAmount) :
                new ObjectParameter("TotalInvoiceAmount", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pro_GetInvoiceListAwaiteApproval_Result>("Pro_GetInvoiceListAwaiteApproval", skipParameter, pageSizeParameter, sortByParameter, company_nameParameter, totalInvoiceAmountParameter);
        }
    
        public virtual int proc_AddFundingRate(Nullable<decimal> rate, Nullable<System.DateTime> date)
        {
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddFundingRate", rateParameter, dateParameter);
        }
    
        public virtual int proc_AddInvoice(string pONumber, Nullable<System.DateTime> pODate, string invoiceNo, string anchorCompName, string invoiceAmt, Nullable<System.DateTime> paymentDueDate, Nullable<int> discount, Nullable<int> days, string uploadInvoice, string uploadDocument)
        {
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            var pODateParameter = pODate.HasValue ?
                new ObjectParameter("PODate", pODate) :
                new ObjectParameter("PODate", typeof(System.DateTime));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var anchorCompNameParameter = anchorCompName != null ?
                new ObjectParameter("AnchorCompName", anchorCompName) :
                new ObjectParameter("AnchorCompName", typeof(string));
    
            var invoiceAmtParameter = invoiceAmt != null ?
                new ObjectParameter("InvoiceAmt", invoiceAmt) :
                new ObjectParameter("InvoiceAmt", typeof(string));
    
            var paymentDueDateParameter = paymentDueDate.HasValue ?
                new ObjectParameter("PaymentDueDate", paymentDueDate) :
                new ObjectParameter("PaymentDueDate", typeof(System.DateTime));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(int));
    
            var daysParameter = days.HasValue ?
                new ObjectParameter("Days", days) :
                new ObjectParameter("Days", typeof(int));
    
            var uploadInvoiceParameter = uploadInvoice != null ?
                new ObjectParameter("UploadInvoice", uploadInvoice) :
                new ObjectParameter("UploadInvoice", typeof(string));
    
            var uploadDocumentParameter = uploadDocument != null ?
                new ObjectParameter("UploadDocument", uploadDocument) :
                new ObjectParameter("UploadDocument", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddInvoice", pONumberParameter, pODateParameter, invoiceNoParameter, anchorCompNameParameter, invoiceAmtParameter, paymentDueDateParameter, discountParameter, daysParameter, uploadInvoiceParameter, uploadDocumentParameter);
        }
    
        public virtual int proc_AddUpdateCompany(Nullable<long> companyID, string company_Name, string login_Id, string password, string address, Nullable<int> interestedAS, Nullable<int> companyType, string pan_Number, string contact_CIN, string contact_Title, string contact_Name, string contact_Designation, string contact_Email, string contact_Mobile, string contact_Comment, Nullable<int> createdBy, Nullable<int> updatedBy, Nullable<long> factoryOrReverseFactory, Nullable<int> status, Nullable<int> returnCompanyId)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var company_NameParameter = company_Name != null ?
                new ObjectParameter("Company_Name", company_Name) :
                new ObjectParameter("Company_Name", typeof(string));
    
            var login_IdParameter = login_Id != null ?
                new ObjectParameter("Login_Id", login_Id) :
                new ObjectParameter("Login_Id", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var interestedASParameter = interestedAS.HasValue ?
                new ObjectParameter("InterestedAS", interestedAS) :
                new ObjectParameter("InterestedAS", typeof(int));
    
            var companyTypeParameter = companyType.HasValue ?
                new ObjectParameter("CompanyType", companyType) :
                new ObjectParameter("CompanyType", typeof(int));
    
            var pan_NumberParameter = pan_Number != null ?
                new ObjectParameter("Pan_Number", pan_Number) :
                new ObjectParameter("Pan_Number", typeof(string));
    
            var contact_CINParameter = contact_CIN != null ?
                new ObjectParameter("Contact_CIN", contact_CIN) :
                new ObjectParameter("Contact_CIN", typeof(string));
    
            var contact_TitleParameter = contact_Title != null ?
                new ObjectParameter("Contact_Title", contact_Title) :
                new ObjectParameter("Contact_Title", typeof(string));
    
            var contact_NameParameter = contact_Name != null ?
                new ObjectParameter("Contact_Name", contact_Name) :
                new ObjectParameter("Contact_Name", typeof(string));
    
            var contact_DesignationParameter = contact_Designation != null ?
                new ObjectParameter("Contact_Designation", contact_Designation) :
                new ObjectParameter("Contact_Designation", typeof(string));
    
            var contact_EmailParameter = contact_Email != null ?
                new ObjectParameter("Contact_Email", contact_Email) :
                new ObjectParameter("Contact_Email", typeof(string));
    
            var contact_MobileParameter = contact_Mobile != null ?
                new ObjectParameter("Contact_Mobile", contact_Mobile) :
                new ObjectParameter("Contact_Mobile", typeof(string));
    
            var contact_CommentParameter = contact_Comment != null ?
                new ObjectParameter("Contact_Comment", contact_Comment) :
                new ObjectParameter("Contact_Comment", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var factoryOrReverseFactoryParameter = factoryOrReverseFactory.HasValue ?
                new ObjectParameter("FactoryOrReverseFactory", factoryOrReverseFactory) :
                new ObjectParameter("FactoryOrReverseFactory", typeof(long));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var returnCompanyIdParameter = returnCompanyId.HasValue ?
                new ObjectParameter("ReturnCompanyId", returnCompanyId) :
                new ObjectParameter("ReturnCompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddUpdateCompany", companyIDParameter, company_NameParameter, login_IdParameter, passwordParameter, addressParameter, interestedASParameter, companyTypeParameter, pan_NumberParameter, contact_CINParameter, contact_TitleParameter, contact_NameParameter, contact_DesignationParameter, contact_EmailParameter, contact_MobileParameter, contact_CommentParameter, createdByParameter, updatedByParameter, factoryOrReverseFactoryParameter, statusParameter, returnCompanyIdParameter);
        }
    
        public virtual ObjectResult<string> proc_AddUpdateCriticalVendors(Nullable<long> companyID, Nullable<long> invAmtLimitStatus, Nullable<decimal> percentageRate, Nullable<decimal> invoiceLimitAmt)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var invAmtLimitStatusParameter = invAmtLimitStatus.HasValue ?
                new ObjectParameter("InvAmtLimitStatus", invAmtLimitStatus) :
                new ObjectParameter("InvAmtLimitStatus", typeof(long));
    
            var percentageRateParameter = percentageRate.HasValue ?
                new ObjectParameter("PercentageRate", percentageRate) :
                new ObjectParameter("PercentageRate", typeof(decimal));
    
            var invoiceLimitAmtParameter = invoiceLimitAmt.HasValue ?
                new ObjectParameter("InvoiceLimitAmt", invoiceLimitAmt) :
                new ObjectParameter("InvoiceLimitAmt", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("proc_AddUpdateCriticalVendors", companyIDParameter, invAmtLimitStatusParameter, percentageRateParameter, invoiceLimitAmtParameter);
        }
    
        public virtual int proc_AddUpdateInvoiceApproved(Nullable<int> approvalID, Nullable<decimal> fromAmount, Nullable<decimal> toAmount, Nullable<int> approvedBy, string users)
        {
            var approvalIDParameter = approvalID.HasValue ?
                new ObjectParameter("ApprovalID", approvalID) :
                new ObjectParameter("ApprovalID", typeof(int));
    
            var fromAmountParameter = fromAmount.HasValue ?
                new ObjectParameter("FromAmount", fromAmount) :
                new ObjectParameter("FromAmount", typeof(decimal));
    
            var toAmountParameter = toAmount.HasValue ?
                new ObjectParameter("ToAmount", toAmount) :
                new ObjectParameter("ToAmount", typeof(decimal));
    
            var approvedByParameter = approvedBy.HasValue ?
                new ObjectParameter("ApprovedBy", approvedBy) :
                new ObjectParameter("ApprovedBy", typeof(int));
    
            var usersParameter = users != null ?
                new ObjectParameter("Users", users) :
                new ObjectParameter("Users", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddUpdateInvoiceApproved", approvalIDParameter, fromAmountParameter, toAmountParameter, approvedByParameter, usersParameter);
        }
    
        public virtual ObjectResult<string> proc_AddUpdateUser(Nullable<long> userID, string name, string email, string mobile, string designation, Nullable<int> rolesAccess, Nullable<long> createdBy, Nullable<long> updatedBy, Nullable<int> accessViewID, string password, Nullable<int> companyID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var rolesAccessParameter = rolesAccess.HasValue ?
                new ObjectParameter("RolesAccess", rolesAccess) :
                new ObjectParameter("RolesAccess", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var accessViewIDParameter = accessViewID.HasValue ?
                new ObjectParameter("AccessViewID", accessViewID) :
                new ObjectParameter("AccessViewID", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("proc_AddUpdateUser", userIDParameter, nameParameter, emailParameter, mobileParameter, designationParameter, rolesAccessParameter, createdByParameter, updatedByParameter, accessViewIDParameter, passwordParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<proc_AnchorCompDropDown_Result> proc_AnchorCompDropDown()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AnchorCompDropDown_Result>("proc_AnchorCompDropDown");
        }
    
        public virtual ObjectResult<proc_AnchorGetNotificationDet_Result> proc_AnchorGetNotificationDet(Nullable<int> skip, Nullable<int> pageSize, string sortBy, string notification, Nullable<long> userID, Nullable<long> isRead)
        {
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var notificationParameter = notification != null ?
                new ObjectParameter("Notification", notification) :
                new ObjectParameter("Notification", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var isReadParameter = isRead.HasValue ?
                new ObjectParameter("isRead", isRead) :
                new ObjectParameter("isRead", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AnchorGetNotificationDet_Result>("proc_AnchorGetNotificationDet", skipParameter, pageSizeParameter, sortByParameter, notificationParameter, userIDParameter, isReadParameter);
        }
    
        public virtual int proc_ChangePassword(string role, Nullable<int> userId, string password)
        {
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ChangePassword", roleParameter, userIdParameter, passwordParameter);
        }
    
        public virtual ObjectResult<proc_CheckAdminLogin_Result> proc_CheckAdminLogin(string inputCredential, string password)
        {
            var inputCredentialParameter = inputCredential != null ?
                new ObjectParameter("InputCredential", inputCredential) :
                new ObjectParameter("InputCredential", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CheckAdminLogin_Result>("proc_CheckAdminLogin", inputCredentialParameter, passwordParameter);
        }
    
        public virtual ObjectResult<proc_CheckLogin_Result> proc_CheckLogin(string emailID, string password)
        {
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CheckLogin_Result>("proc_CheckLogin", emailIDParameter, passwordParameter);
        }
    
        public virtual ObjectResult<proc_CheckLoginV1_Result> proc_CheckLoginV1(string pANNumber, string password)
        {
            var pANNumberParameter = pANNumber != null ?
                new ObjectParameter("PANNumber", pANNumber) :
                new ObjectParameter("PANNumber", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CheckLoginV1_Result>("proc_CheckLoginV1", pANNumberParameter, passwordParameter);
        }
    
        public virtual ObjectResult<string> proc_CheckPassword(string role, Nullable<int> userId)
        {
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("proc_CheckPassword", roleParameter, userIdParameter);
        }
    
        public virtual ObjectResult<proc_CheckSuperAdminLogin_Result> proc_CheckSuperAdminLogin(string emailId, string password)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CheckSuperAdminLogin_Result>("proc_CheckSuperAdminLogin", emailIdParameter, passwordParameter);
        }
    
        public virtual ObjectResult<proc_CheckUserLogin_Result> proc_CheckUserLogin(string emailId, string password)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CheckUserLogin_Result>("proc_CheckUserLogin", emailIdParameter, passwordParameter);
        }
    
        public virtual int proc_CommonUseSP(string moduleName)
        {
            var moduleNameParameter = moduleName != null ?
                new ObjectParameter("ModuleName", moduleName) :
                new ObjectParameter("ModuleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_CommonUseSP", moduleNameParameter);
        }
    
        public virtual int proc_deleteCriticalVendors(Nullable<long> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_deleteCriticalVendors", companyIDParameter);
        }
    
        public virtual int proc_deleteInvoiceApproval(Nullable<int> approvalID)
        {
            var approvalIDParameter = approvalID.HasValue ?
                new ObjectParameter("ApprovalID", approvalID) :
                new ObjectParameter("ApprovalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_deleteInvoiceApproval", approvalIDParameter);
        }
    
        public virtual int proc_deleteUser(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_deleteUser", userIDParameter);
        }
    
        public virtual int Proc_DeleteVendorDocRecord(Nullable<long> vendorDocId, string vendorDocFileName)
        {
            var vendorDocIdParameter = vendorDocId.HasValue ?
                new ObjectParameter("VendorDocId", vendorDocId) :
                new ObjectParameter("VendorDocId", typeof(long));
    
            var vendorDocFileNameParameter = vendorDocFileName != null ?
                new ObjectParameter("VendorDocFileName", vendorDocFileName) :
                new ObjectParameter("VendorDocFileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_DeleteVendorDocRecord", vendorDocIdParameter, vendorDocFileNameParameter);
        }
    
        public virtual ObjectResult<proc_EditCompany_Result> proc_EditCompany(Nullable<long> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_EditCompany_Result>("proc_EditCompany", companyIDParameter);
        }
    
        public virtual ObjectResult<proc_EditInvoiceApproved_Result> proc_EditInvoiceApproved(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_EditInvoiceApproved_Result>("proc_EditInvoiceApproved", userIDParameter);
        }
    
        public virtual ObjectResult<proc_EditUser_Result> proc_EditUser(Nullable<long> userID, Nullable<long> skip, Nullable<int> pageSize, string sortBy)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_EditUser_Result>("proc_EditUser", userIDParameter, skipParameter, pageSizeParameter, sortByParameter);
        }
    
        public virtual ObjectResult<Proc_GetAmountDiscountRatewise_Result> Proc_GetAmountDiscountRatewise(Nullable<long> vendorID, Nullable<long> skip, Nullable<int> pageSize, string sortBy, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetAmountDiscountRatewise_Result>("Proc_GetAmountDiscountRatewise", vendorIDParameter, skipParameter, pageSizeParameter, sortByParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Proc_GetAmountDiscountRatewiseInPercent_Result> Proc_GetAmountDiscountRatewiseInPercent(Nullable<long> vendorID, Nullable<long> skip, Nullable<int> pageSize, string sortBy, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetAmountDiscountRatewiseInPercent_Result>("Proc_GetAmountDiscountRatewiseInPercent", vendorIDParameter, skipParameter, pageSizeParameter, sortByParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Proc_GetAnchorCompDocument_Result> Proc_GetAnchorCompDocument(Nullable<int> anchorCompanyId)
        {
            var anchorCompanyIdParameter = anchorCompanyId.HasValue ?
                new ObjectParameter("AnchorCompanyId", anchorCompanyId) :
                new ObjectParameter("AnchorCompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetAnchorCompDocument_Result>("Proc_GetAnchorCompDocument", anchorCompanyIdParameter);
        }
    
        public virtual ObjectResult<proc_GetAnchorCompDocUser_Result> proc_GetAnchorCompDocUser(Nullable<int> userID, string fileName)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAnchorCompDocUser_Result>("proc_GetAnchorCompDocUser", userIDParameter, fileNameParameter);
        }
    
        public virtual ObjectResult<Proc_GetAnchorCompListing_Result> Proc_GetAnchorCompListing(string page, Nullable<long> vendorID, string company_ID, string company_name, string totalAppInvAmt, Nullable<long> skip, Nullable<int> pageSize, string sortBy, Nullable<int> isTotalCount, string totalAwaitedInvAmt)
        {
            var pageParameter = page != null ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(string));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var company_IDParameter = company_ID != null ?
                new ObjectParameter("Company_ID", company_ID) :
                new ObjectParameter("Company_ID", typeof(string));
    
            var company_nameParameter = company_name != null ?
                new ObjectParameter("Company_name", company_name) :
                new ObjectParameter("Company_name", typeof(string));
    
            var totalAppInvAmtParameter = totalAppInvAmt != null ?
                new ObjectParameter("TotalAppInvAmt", totalAppInvAmt) :
                new ObjectParameter("TotalAppInvAmt", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var isTotalCountParameter = isTotalCount.HasValue ?
                new ObjectParameter("IsTotalCount", isTotalCount) :
                new ObjectParameter("IsTotalCount", typeof(int));
    
            var totalAwaitedInvAmtParameter = totalAwaitedInvAmt != null ?
                new ObjectParameter("TotalAwaitedInvAmt", totalAwaitedInvAmt) :
                new ObjectParameter("TotalAwaitedInvAmt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetAnchorCompListing_Result>("Proc_GetAnchorCompListing", pageParameter, vendorIDParameter, company_IDParameter, company_nameParameter, totalAppInvAmtParameter, skipParameter, pageSizeParameter, sortByParameter, isTotalCountParameter, totalAwaitedInvAmtParameter);
        }
    
        public virtual int Proc_GetAnchorCompListing1(string page, Nullable<long> vendorID, string company_ID, string company_name, string totalAppInvAmt, Nullable<long> skip, Nullable<int> pageSize, string sortBy, Nullable<int> isTotalCount)
        {
            var pageParameter = page != null ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(string));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var company_IDParameter = company_ID != null ?
                new ObjectParameter("Company_ID", company_ID) :
                new ObjectParameter("Company_ID", typeof(string));
    
            var company_nameParameter = company_name != null ?
                new ObjectParameter("Company_name", company_name) :
                new ObjectParameter("Company_name", typeof(string));
    
            var totalAppInvAmtParameter = totalAppInvAmt != null ?
                new ObjectParameter("TotalAppInvAmt", totalAppInvAmt) :
                new ObjectParameter("TotalAppInvAmt", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var isTotalCountParameter = isTotalCount.HasValue ?
                new ObjectParameter("IsTotalCount", isTotalCount) :
                new ObjectParameter("IsTotalCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_GetAnchorCompListing1", pageParameter, vendorIDParameter, company_IDParameter, company_nameParameter, totalAppInvAmtParameter, skipParameter, pageSizeParameter, sortByParameter, isTotalCountParameter);
        }
    
        public virtual ObjectResult<Proc_GetAnchorDashboardCompListing_Result> Proc_GetAnchorDashboardCompListing(string page, Nullable<long> anchCompanyID, string company_ID, string company_name, string totalAppInvAmt, Nullable<long> skip, Nullable<int> pageSize, string sortBy, Nullable<int> isTotalCount, string totalAwaitedInvAmt, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var pageParameter = page != null ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(string));
    
            var anchCompanyIDParameter = anchCompanyID.HasValue ?
                new ObjectParameter("AnchCompanyID", anchCompanyID) :
                new ObjectParameter("AnchCompanyID", typeof(long));
    
            var company_IDParameter = company_ID != null ?
                new ObjectParameter("Company_ID", company_ID) :
                new ObjectParameter("Company_ID", typeof(string));
    
            var company_nameParameter = company_name != null ?
                new ObjectParameter("Company_name", company_name) :
                new ObjectParameter("Company_name", typeof(string));
    
            var totalAppInvAmtParameter = totalAppInvAmt != null ?
                new ObjectParameter("TotalAppInvAmt", totalAppInvAmt) :
                new ObjectParameter("TotalAppInvAmt", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var isTotalCountParameter = isTotalCount.HasValue ?
                new ObjectParameter("IsTotalCount", isTotalCount) :
                new ObjectParameter("IsTotalCount", typeof(int));
    
            var totalAwaitedInvAmtParameter = totalAwaitedInvAmt != null ?
                new ObjectParameter("TotalAwaitedInvAmt", totalAwaitedInvAmt) :
                new ObjectParameter("TotalAwaitedInvAmt", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetAnchorDashboardCompListing_Result>("Proc_GetAnchorDashboardCompListing", pageParameter, anchCompanyIDParameter, company_IDParameter, company_nameParameter, totalAppInvAmtParameter, skipParameter, pageSizeParameter, sortByParameter, isTotalCountParameter, totalAwaitedInvAmtParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Proc_getAnchorGraphDet_Result> Proc_getAnchorGraphDet(string sP_TYPE, Nullable<long> anchorCompID)
        {
            var sP_TYPEParameter = sP_TYPE != null ?
                new ObjectParameter("SP_TYPE", sP_TYPE) :
                new ObjectParameter("SP_TYPE", typeof(string));
    
            var anchorCompIDParameter = anchorCompID.HasValue ?
                new ObjectParameter("AnchorCompID", anchorCompID) :
                new ObjectParameter("AnchorCompID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_getAnchorGraphDet_Result>("Proc_getAnchorGraphDet", sP_TYPEParameter, anchorCompIDParameter);
        }
    
        public virtual ObjectResult<proc_GetAnchorInvoiceStatus_Result> proc_GetAnchorInvoiceStatus(Nullable<long> skip, Nullable<int> pageSize, Nullable<long> vendorID, Nullable<long> anchorCompID, string sortBy, string vendorName, string invoicetotatalamt, string invoiceStatus, string pONumber, string invoiceNo)
        {
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var anchorCompIDParameter = anchorCompID.HasValue ?
                new ObjectParameter("AnchorCompID", anchorCompID) :
                new ObjectParameter("AnchorCompID", typeof(long));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var invoicetotatalamtParameter = invoicetotatalamt != null ?
                new ObjectParameter("Invoicetotatalamt", invoicetotatalamt) :
                new ObjectParameter("Invoicetotatalamt", typeof(string));
    
            var invoiceStatusParameter = invoiceStatus != null ?
                new ObjectParameter("InvoiceStatus", invoiceStatus) :
                new ObjectParameter("InvoiceStatus", typeof(string));
    
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAnchorInvoiceStatus_Result>("proc_GetAnchorInvoiceStatus", skipParameter, pageSizeParameter, vendorIDParameter, anchorCompIDParameter, sortByParameter, vendorNameParameter, invoicetotatalamtParameter, invoiceStatusParameter, pONumberParameter, invoiceNoParameter);
        }
    
        public virtual ObjectResult<Proc_GetAnchorLostOppListing_Result> Proc_GetAnchorLostOppListing(Nullable<long> anchorCompID, Nullable<long> skip, Nullable<int> pageSize, string sortBy, string companyID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var anchorCompIDParameter = anchorCompID.HasValue ?
                new ObjectParameter("AnchorCompID", anchorCompID) :
                new ObjectParameter("AnchorCompID", typeof(long));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetAnchorLostOppListing_Result>("Proc_GetAnchorLostOppListing", anchorCompIDParameter, skipParameter, pageSizeParameter, sortByParameter, companyIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<proc_GetAvailableForFunding_Result> proc_GetAvailableForFunding(Nullable<long> skip, Nullable<int> pageSize, string sortBy, string anchorCompanyName, string invoiceAmt, string page, Nullable<long> vendorId)
        {
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var anchorCompanyNameParameter = anchorCompanyName != null ?
                new ObjectParameter("AnchorCompanyName", anchorCompanyName) :
                new ObjectParameter("AnchorCompanyName", typeof(string));
    
            var invoiceAmtParameter = invoiceAmt != null ?
                new ObjectParameter("InvoiceAmt", invoiceAmt) :
                new ObjectParameter("InvoiceAmt", typeof(string));
    
            var pageParameter = page != null ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(string));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAvailableForFunding_Result>("proc_GetAvailableForFunding", skipParameter, pageSizeParameter, sortByParameter, anchorCompanyNameParameter, invoiceAmtParameter, pageParameter, vendorIdParameter);
        }
    
        public virtual ObjectResult<proc_GetBucketDet_Result> proc_GetBucketDet(Nullable<int> skip, Nullable<int> pageSize, string sortBy, Nullable<long> vendorID)
        {
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetBucketDet_Result>("proc_GetBucketDet", skipParameter, pageSizeParameter, sortByParameter, vendorIDParameter);
        }
    
        public virtual ObjectResult<proc_GetBucketDetView_Result> proc_GetBucketDetView(Nullable<int> skip, Nullable<int> pageSize, string sortBy, Nullable<long> vendorID, Nullable<long> bucketID)
        {
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var bucketIDParameter = bucketID.HasValue ?
                new ObjectParameter("BucketID", bucketID) :
                new ObjectParameter("BucketID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetBucketDetView_Result>("proc_GetBucketDetView", skipParameter, pageSizeParameter, sortByParameter, vendorIDParameter, bucketIDParameter);
        }
    
        public virtual ObjectResult<proc_getCompany_Result> proc_getCompany(Nullable<long> skip, Nullable<int> pageSize, string sortBy, string companyName, string contactPerson)
        {
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_getCompany_Result>("proc_getCompany", skipParameter, pageSizeParameter, sortByParameter, companyNameParameter, contactPersonParameter);
        }
    
        public virtual ObjectResult<proc_GetContentForUser_Result> proc_GetContentForUser(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetContentForUser_Result>("proc_GetContentForUser", userIDParameter);
        }
    
        public virtual ObjectResult<Proc_GetCriticalVendorsListing_Result> Proc_GetCriticalVendorsListing(Nullable<long> company_ID, string vendorName, string totalInvAmtLimit, Nullable<long> skip, Nullable<int> pageSize, string sortBy)
        {
            var company_IDParameter = company_ID.HasValue ?
                new ObjectParameter("Company_ID", company_ID) :
                new ObjectParameter("Company_ID", typeof(long));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var totalInvAmtLimitParameter = totalInvAmtLimit != null ?
                new ObjectParameter("TotalInvAmtLimit", totalInvAmtLimit) :
                new ObjectParameter("TotalInvAmtLimit", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetCriticalVendorsListing_Result>("Proc_GetCriticalVendorsListing", company_IDParameter, vendorNameParameter, totalInvAmtLimitParameter, skipParameter, pageSizeParameter, sortByParameter);
        }
    
        public virtual ObjectResult<proc_GetDailyReceiveinvoiceDetails_Result> proc_GetDailyReceiveinvoiceDetails(Nullable<int> companyId, Nullable<long> skip, Nullable<int> pageSize, string sortBy, string pONumber, Nullable<long> vendorID)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetDailyReceiveinvoiceDetails_Result>("proc_GetDailyReceiveinvoiceDetails", companyIdParameter, skipParameter, pageSizeParameter, sortByParameter, pONumberParameter, vendorIDParameter);
        }
    
        public virtual ObjectResult<Proc_GetDashboardList_Result> Proc_GetDashboardList(string page, Nullable<long> vendorID, string company_name, string totalAppInvAmt, Nullable<long> skip, Nullable<int> pageSize, string sortBy)
        {
            var pageParameter = page != null ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(string));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var company_nameParameter = company_name != null ?
                new ObjectParameter("Company_name", company_name) :
                new ObjectParameter("Company_name", typeof(string));
    
            var totalAppInvAmtParameter = totalAppInvAmt != null ?
                new ObjectParameter("TotalAppInvAmt", totalAppInvAmt) :
                new ObjectParameter("TotalAppInvAmt", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetDashboardList_Result>("Proc_GetDashboardList", pageParameter, vendorIDParameter, company_nameParameter, totalAppInvAmtParameter, skipParameter, pageSizeParameter, sortByParameter);
        }
    
        public virtual ObjectResult<proc_GetDiscountOfferedInvoiceDet_Result> proc_GetDiscountOfferedInvoiceDet(Nullable<long> skip, Nullable<int> pageSize, string sortBy, string anchorCompanyName, string invoiceAmt, string pONumber, string invoiceNo, Nullable<int> companyId, Nullable<short> isDiscountNull, Nullable<long> vendorID)
        {
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var anchorCompanyNameParameter = anchorCompanyName != null ?
                new ObjectParameter("AnchorCompanyName", anchorCompanyName) :
                new ObjectParameter("AnchorCompanyName", typeof(string));
    
            var invoiceAmtParameter = invoiceAmt != null ?
                new ObjectParameter("InvoiceAmt", invoiceAmt) :
                new ObjectParameter("InvoiceAmt", typeof(string));
    
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var isDiscountNullParameter = isDiscountNull.HasValue ?
                new ObjectParameter("IsDiscountNull", isDiscountNull) :
                new ObjectParameter("IsDiscountNull", typeof(short));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetDiscountOfferedInvoiceDet_Result>("proc_GetDiscountOfferedInvoiceDet", skipParameter, pageSizeParameter, sortByParameter, anchorCompanyNameParameter, invoiceAmtParameter, pONumberParameter, invoiceNoParameter, companyIdParameter, isDiscountNullParameter, vendorIDParameter);
        }
    
        public virtual ObjectResult<Proc_GetEarningListing_Result> Proc_GetEarningListing(Nullable<long> vendorID, Nullable<long> skip, Nullable<int> pageSize, string sortBy, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetEarningListing_Result>("Proc_GetEarningListing", vendorIDParameter, skipParameter, pageSizeParameter, sortByParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<proc_GetEmail_Result> proc_GetEmail(string emailId)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetEmail_Result>("proc_GetEmail", emailIdParameter);
        }
    
        public virtual ObjectResult<PROC_GetEmailIDByInvoiceId_Result> PROC_GetEmailIDByInvoiceId(string invoiceIdString)
        {
            var invoiceIdStringParameter = invoiceIdString != null ?
                new ObjectParameter("InvoiceIdString", invoiceIdString) :
                new ObjectParameter("InvoiceIdString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_GetEmailIDByInvoiceId_Result>("PROC_GetEmailIDByInvoiceId", invoiceIdStringParameter);
        }
    
        public virtual ObjectResult<proc_getEmployeeData_Result> proc_getEmployeeData(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_getEmployeeData_Result>("proc_getEmployeeData", employeeIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> proc_getEmployeeData_Demo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("proc_getEmployeeData_Demo");
        }
    
        public virtual ObjectResult<string> Proc_getForgetPasswordEmailTemplate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Proc_getForgetPasswordEmailTemplate");
        }
    
        public virtual ObjectResult<Proc_GetFundingReqAmtListing_Result> Proc_GetFundingReqAmtListing(Nullable<long> vendorID, Nullable<long> skip, Nullable<int> pageSize, string sortBy, string companyID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetFundingReqAmtListing_Result>("Proc_GetFundingReqAmtListing", vendorIDParameter, skipParameter, pageSizeParameter, sortByParameter, companyIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int Proc_GetFundingReqListing(Nullable<long> vendorID, Nullable<long> skip, Nullable<int> pageSize, string sortBy, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_GetFundingReqListing", vendorIDParameter, skipParameter, pageSizeParameter, sortByParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Proc_GetFundingReqPercentListing_Result> Proc_GetFundingReqPercentListing(Nullable<long> vendorID, Nullable<long> skip, Nullable<int> pageSize, string sortBy, string companyID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetFundingReqPercentListing_Result>("Proc_GetFundingReqPercentListing", vendorIDParameter, skipParameter, pageSizeParameter, sortByParameter, companyIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<proc_GetInvoiceApprovalDet_Result> proc_GetInvoiceApprovalDet(Nullable<long> skip, Nullable<int> pageSize, string sortBy)
        {
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetInvoiceApprovalDet_Result>("proc_GetInvoiceApprovalDet", skipParameter, pageSizeParameter, sortByParameter);
        }
    
        public virtual ObjectResult<proc_GetInvoiceDet_Result> proc_GetInvoiceDet(Nullable<long> skip, Nullable<int> pageSize, string sortBy, string anchorCompanyName, string invoiceStatus, string pONumber, string invoiceNo, Nullable<int> companyId, Nullable<short> isDiscountNull, Nullable<long> vendorID)
        {
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var anchorCompanyNameParameter = anchorCompanyName != null ?
                new ObjectParameter("AnchorCompanyName", anchorCompanyName) :
                new ObjectParameter("AnchorCompanyName", typeof(string));
    
            var invoiceStatusParameter = invoiceStatus != null ?
                new ObjectParameter("InvoiceStatus", invoiceStatus) :
                new ObjectParameter("InvoiceStatus", typeof(string));
    
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var isDiscountNullParameter = isDiscountNull.HasValue ?
                new ObjectParameter("IsDiscountNull", isDiscountNull) :
                new ObjectParameter("IsDiscountNull", typeof(short));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetInvoiceDet_Result>("proc_GetInvoiceDet", skipParameter, pageSizeParameter, sortByParameter, anchorCompanyNameParameter, invoiceStatusParameter, pONumberParameter, invoiceNoParameter, companyIdParameter, isDiscountNullParameter, vendorIDParameter);
        }
    
        public virtual ObjectResult<proc_GetInvoiceDetails_Result> proc_GetInvoiceDetails(Nullable<long> skip, Nullable<int> pageSize, string sortBy, string anchorCompanyName, string invoiceStatus, string pONumber, string invoiceNo, Nullable<int> companyId, Nullable<short> isDiscountNull)
        {
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var anchorCompanyNameParameter = anchorCompanyName != null ?
                new ObjectParameter("AnchorCompanyName", anchorCompanyName) :
                new ObjectParameter("AnchorCompanyName", typeof(string));
    
            var invoiceStatusParameter = invoiceStatus != null ?
                new ObjectParameter("InvoiceStatus", invoiceStatus) :
                new ObjectParameter("InvoiceStatus", typeof(string));
    
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var isDiscountNullParameter = isDiscountNull.HasValue ?
                new ObjectParameter("IsDiscountNull", isDiscountNull) :
                new ObjectParameter("IsDiscountNull", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetInvoiceDetails_Result>("proc_GetInvoiceDetails", skipParameter, pageSizeParameter, sortByParameter, anchorCompanyNameParameter, invoiceStatusParameter, pONumberParameter, invoiceNoParameter, companyIdParameter, isDiscountNullParameter);
        }
    
        public virtual ObjectResult<proc_GetInvoiceHistory_Result> proc_GetInvoiceHistory(string sortBy, Nullable<int> pageSize, Nullable<long> skip, string anchorCompanyName, string invoicetotatalamt, string invoiceStatus, Nullable<long> vendorID)
        {
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var anchorCompanyNameParameter = anchorCompanyName != null ?
                new ObjectParameter("AnchorCompanyName", anchorCompanyName) :
                new ObjectParameter("AnchorCompanyName", typeof(string));
    
            var invoicetotatalamtParameter = invoicetotatalamt != null ?
                new ObjectParameter("Invoicetotatalamt", invoicetotatalamt) :
                new ObjectParameter("Invoicetotatalamt", typeof(string));
    
            var invoiceStatusParameter = invoiceStatus != null ?
                new ObjectParameter("InvoiceStatus", invoiceStatus) :
                new ObjectParameter("InvoiceStatus", typeof(string));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetInvoiceHistory_Result>("proc_GetInvoiceHistory", sortByParameter, pageSizeParameter, skipParameter, anchorCompanyNameParameter, invoicetotatalamtParameter, invoiceStatusParameter, vendorIDParameter);
        }
    
        public virtual ObjectResult<Proc_GetInvoiceJourneyHistory_Result> Proc_GetInvoiceJourneyHistory(Nullable<long> invoiceId, string pageName)
        {
            var invoiceIdParameter = invoiceId.HasValue ?
                new ObjectParameter("InvoiceId", invoiceId) :
                new ObjectParameter("InvoiceId", typeof(long));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetInvoiceJourneyHistory_Result>("Proc_GetInvoiceJourneyHistory", invoiceIdParameter, pageNameParameter);
        }
    
        public virtual ObjectResult<Proc_GetInvoiceListByAmount_Result> Proc_GetInvoiceListByAmount(Nullable<long> vendorId, Nullable<decimal> sumAssuredAmount, Nullable<long> skip, Nullable<int> pageSize, string sortBy, Nullable<System.DateTime> fundingDate, Nullable<decimal> discount)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(long));
    
            var sumAssuredAmountParameter = sumAssuredAmount.HasValue ?
                new ObjectParameter("sumAssuredAmount", sumAssuredAmount) :
                new ObjectParameter("sumAssuredAmount", typeof(decimal));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var fundingDateParameter = fundingDate.HasValue ?
                new ObjectParameter("fundingDate", fundingDate) :
                new ObjectParameter("fundingDate", typeof(System.DateTime));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("discount", discount) :
                new ObjectParameter("discount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetInvoiceListByAmount_Result>("Proc_GetInvoiceListByAmount", vendorIdParameter, sumAssuredAmountParameter, skipParameter, pageSizeParameter, sortByParameter, fundingDateParameter, discountParameter);
        }
    
        public virtual ObjectResult<Proc_getLookupDetailsByGroup_Result> Proc_getLookupDetailsByGroup(string lookupFor)
        {
            var lookupForParameter = lookupFor != null ?
                new ObjectParameter("LookupFor", lookupFor) :
                new ObjectParameter("LookupFor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_getLookupDetailsByGroup_Result>("Proc_getLookupDetailsByGroup", lookupForParameter);
        }
    
        public virtual ObjectResult<Proc_GetLostOppListing_Result> Proc_GetLostOppListing(Nullable<long> vendorID, Nullable<long> skip, Nullable<int> pageSize, string sortBy, string companyID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetLostOppListing_Result>("Proc_GetLostOppListing", vendorIDParameter, skipParameter, pageSizeParameter, sortByParameter, companyIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> proc_GetMaxAvailableVendorAmount(Nullable<int> vedorID)
        {
            var vedorIDParameter = vedorID.HasValue ?
                new ObjectParameter("VedorID", vedorID) :
                new ObjectParameter("VedorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("proc_GetMaxAvailableVendorAmount", vedorIDParameter);
        }
    
        public virtual ObjectResult<proc_GetNotificationDet_Result> proc_GetNotificationDet(Nullable<int> skip, Nullable<int> pageSize, string sortBy, string notification, Nullable<long> userID, Nullable<long> isRead)
        {
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var notificationParameter = notification != null ?
                new ObjectParameter("Notification", notification) :
                new ObjectParameter("Notification", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var isReadParameter = isRead.HasValue ?
                new ObjectParameter("isRead", isRead) :
                new ObjectParameter("isRead", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetNotificationDet_Result>("proc_GetNotificationDet", skipParameter, pageSizeParameter, sortByParameter, notificationParameter, userIDParameter, isReadParameter);
        }
    
        public virtual ObjectResult<proc_GetPan_Result> proc_GetPan(string panNumber)
        {
            var panNumberParameter = panNumber != null ?
                new ObjectParameter("PanNumber", panNumber) :
                new ObjectParameter("PanNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetPan_Result>("proc_GetPan", panNumberParameter);
        }
    
        public virtual ObjectResult<proc_GetPurchaseOrderDet_Result> proc_GetPurchaseOrderDet(Nullable<long> skip, Nullable<int> pageSize, string sortBy, string anchorCompanyName, string invoiceAmt, string pONumber, string invoiceNo, Nullable<int> companyId, Nullable<short> isDiscountNull)
        {
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var anchorCompanyNameParameter = anchorCompanyName != null ?
                new ObjectParameter("AnchorCompanyName", anchorCompanyName) :
                new ObjectParameter("AnchorCompanyName", typeof(string));
    
            var invoiceAmtParameter = invoiceAmt != null ?
                new ObjectParameter("InvoiceAmt", invoiceAmt) :
                new ObjectParameter("InvoiceAmt", typeof(string));
    
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var isDiscountNullParameter = isDiscountNull.HasValue ?
                new ObjectParameter("IsDiscountNull", isDiscountNull) :
                new ObjectParameter("IsDiscountNull", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetPurchaseOrderDet_Result>("proc_GetPurchaseOrderDet", skipParameter, pageSizeParameter, sortByParameter, anchorCompanyNameParameter, invoiceAmtParameter, pONumberParameter, invoiceNoParameter, companyIdParameter, isDiscountNullParameter);
        }
    
        public virtual ObjectResult<proc_GetPurchaseOrderDetByPONumber_Result> proc_GetPurchaseOrderDetByPONumber(string pONumber)
        {
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetPurchaseOrderDetByPONumber_Result>("proc_GetPurchaseOrderDetByPONumber", pONumberParameter);
        }
    
        public virtual ObjectResult<string> Proc_getRegisterEmailTemplate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Proc_getRegisterEmailTemplate");
        }
    
        public virtual ObjectResult<Proc_GetSAPConfigurationDataBasedOnKey_Result> Proc_GetSAPConfigurationDataBasedOnKey(string identificationKey)
        {
            var identificationKeyParameter = identificationKey != null ?
                new ObjectParameter("identificationKey", identificationKey) :
                new ObjectParameter("identificationKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetSAPConfigurationDataBasedOnKey_Result>("Proc_GetSAPConfigurationDataBasedOnKey", identificationKeyParameter);
        }
    
        public virtual ObjectResult<proc_GetTodaysInvoiceDet_Result> proc_GetTodaysInvoiceDet(Nullable<long> skip, Nullable<int> pageSize, string sortBy, string anchorCompanyName, string approvedamt, Nullable<long> vendorID)
        {
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var anchorCompanyNameParameter = anchorCompanyName != null ?
                new ObjectParameter("AnchorCompanyName", anchorCompanyName) :
                new ObjectParameter("AnchorCompanyName", typeof(string));
    
            var approvedamtParameter = approvedamt != null ?
                new ObjectParameter("Approvedamt", approvedamt) :
                new ObjectParameter("Approvedamt", typeof(string));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetTodaysInvoiceDet_Result>("proc_GetTodaysInvoiceDet", skipParameter, pageSizeParameter, sortByParameter, anchorCompanyNameParameter, approvedamtParameter, vendorIDParameter);
        }
    
        public virtual ObjectResult<string> Proc_getUserEmailTemplate(Nullable<long> accessViewId)
        {
            var accessViewIdParameter = accessViewId.HasValue ?
                new ObjectParameter("AccessViewId", accessViewId) :
                new ObjectParameter("AccessViewId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Proc_getUserEmailTemplate", accessViewIdParameter);
        }
    
        public virtual ObjectResult<proc_GetVendorApprovedTodayViewListing_Result> proc_GetVendorApprovedTodayViewListing(Nullable<long> anchCompanyID, Nullable<int> vendorID, string bucketID, string totalAppInvAmt, Nullable<long> skip, Nullable<int> pageSize, string sortBy)
        {
            var anchCompanyIDParameter = anchCompanyID.HasValue ?
                new ObjectParameter("AnchCompanyID", anchCompanyID) :
                new ObjectParameter("AnchCompanyID", typeof(long));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var bucketIDParameter = bucketID != null ?
                new ObjectParameter("BucketID", bucketID) :
                new ObjectParameter("BucketID", typeof(string));
    
            var totalAppInvAmtParameter = totalAppInvAmt != null ?
                new ObjectParameter("TotalAppInvAmt", totalAppInvAmt) :
                new ObjectParameter("TotalAppInvAmt", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetVendorApprovedTodayViewListing_Result>("proc_GetVendorApprovedTodayViewListing", anchCompanyIDParameter, vendorIDParameter, bucketIDParameter, totalAppInvAmtParameter, skipParameter, pageSizeParameter, sortByParameter);
        }
    
        public virtual ObjectResult<proc_GetVendorBucketInvoiceViewListing_Result> proc_GetVendorBucketInvoiceViewListing(Nullable<long> anchCompanyID, Nullable<long> vendorID, Nullable<long> bucketID, string invoiceID, string pOID, Nullable<long> skip, Nullable<int> pageSize, string sortBy)
        {
            var anchCompanyIDParameter = anchCompanyID.HasValue ?
                new ObjectParameter("AnchCompanyID", anchCompanyID) :
                new ObjectParameter("AnchCompanyID", typeof(long));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var bucketIDParameter = bucketID.HasValue ?
                new ObjectParameter("BucketID", bucketID) :
                new ObjectParameter("BucketID", typeof(long));
    
            var invoiceIDParameter = invoiceID != null ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(string));
    
            var pOIDParameter = pOID != null ?
                new ObjectParameter("POID", pOID) :
                new ObjectParameter("POID", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetVendorBucketInvoiceViewListing_Result>("proc_GetVendorBucketInvoiceViewListing", anchCompanyIDParameter, vendorIDParameter, bucketIDParameter, invoiceIDParameter, pOIDParameter, skipParameter, pageSizeParameter, sortByParameter);
        }
    
        public virtual ObjectResult<proc_GetVendorBucketWiseDiscInvViewListing_Result> proc_GetVendorBucketWiseDiscInvViewListing(Nullable<long> anchCompanyID, Nullable<int> vendorID, string bucketID, string invoiceID, string pOID, Nullable<long> skip, Nullable<int> pageSize, string sortBy)
        {
            var anchCompanyIDParameter = anchCompanyID.HasValue ?
                new ObjectParameter("AnchCompanyID", anchCompanyID) :
                new ObjectParameter("AnchCompanyID", typeof(long));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var bucketIDParameter = bucketID != null ?
                new ObjectParameter("BucketID", bucketID) :
                new ObjectParameter("BucketID", typeof(string));
    
            var invoiceIDParameter = invoiceID != null ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(string));
    
            var pOIDParameter = pOID != null ?
                new ObjectParameter("POID", pOID) :
                new ObjectParameter("POID", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetVendorBucketWiseDiscInvViewListing_Result>("proc_GetVendorBucketWiseDiscInvViewListing", anchCompanyIDParameter, vendorIDParameter, bucketIDParameter, invoiceIDParameter, pOIDParameter, skipParameter, pageSizeParameter, sortByParameter);
        }
    
        public virtual int proc_GetVendorDet(Nullable<long> vendorID, string vendorName, Nullable<int> vendorStatus, Nullable<bool> isDashboard, string searchName)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var vendorStatusParameter = vendorStatus.HasValue ?
                new ObjectParameter("VendorStatus", vendorStatus) :
                new ObjectParameter("VendorStatus", typeof(int));
    
            var isDashboardParameter = isDashboard.HasValue ?
                new ObjectParameter("IsDashboard", isDashboard) :
                new ObjectParameter("IsDashboard", typeof(bool));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_GetVendorDet", vendorIDParameter, vendorNameParameter, vendorStatusParameter, isDashboardParameter, searchNameParameter);
        }
    
        public virtual ObjectResult<Proc_GetVendorDocumentDet_Result> Proc_GetVendorDocumentDet(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetVendorDocumentDet_Result>("Proc_GetVendorDocumentDet", vendorIDParameter);
        }
    
        public virtual ObjectResult<proc_GetVendorDocUser_Result> proc_GetVendorDocUser(Nullable<int> userID, string fileName)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetVendorDocUser_Result>("proc_GetVendorDocUser", userIDParameter, fileNameParameter);
        }
    
        public virtual ObjectResult<Proc_getVendorGraphDet_Result> Proc_getVendorGraphDet(string sP_TYPE, Nullable<long> vendorID)
        {
            var sP_TYPEParameter = sP_TYPE != null ?
                new ObjectParameter("SP_TYPE", sP_TYPE) :
                new ObjectParameter("SP_TYPE", typeof(string));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_getVendorGraphDet_Result>("Proc_getVendorGraphDet", sP_TYPEParameter, vendorIDParameter);
        }
    
        public virtual ObjectResult<proc_GetVendorINVApprovedTodayListing_Result> proc_GetVendorINVApprovedTodayListing(Nullable<long> anchCompanyID, string vendorName, string totalAppInvAmt, Nullable<long> skip, Nullable<int> pageSize, string sortBy)
        {
            var anchCompanyIDParameter = anchCompanyID.HasValue ?
                new ObjectParameter("AnchCompanyID", anchCompanyID) :
                new ObjectParameter("AnchCompanyID", typeof(long));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var totalAppInvAmtParameter = totalAppInvAmt != null ?
                new ObjectParameter("TotalAppInvAmt", totalAppInvAmt) :
                new ObjectParameter("TotalAppInvAmt", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetVendorINVApprovedTodayListing_Result>("proc_GetVendorINVApprovedTodayListing", anchCompanyIDParameter, vendorNameParameter, totalAppInvAmtParameter, skipParameter, pageSizeParameter, sortByParameter);
        }
    
        public virtual ObjectResult<proc_GetVendorInvAwaitedAppListing_Result> proc_GetVendorInvAwaitedAppListing(Nullable<long> anchCompanyID, string vendorName, string totalAppInvAmt, Nullable<long> skip, Nullable<int> pageSize, string sortBy)
        {
            var anchCompanyIDParameter = anchCompanyID.HasValue ?
                new ObjectParameter("AnchCompanyID", anchCompanyID) :
                new ObjectParameter("AnchCompanyID", typeof(long));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var totalAppInvAmtParameter = totalAppInvAmt != null ?
                new ObjectParameter("TotalAppInvAmt", totalAppInvAmt) :
                new ObjectParameter("TotalAppInvAmt", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetVendorInvAwaitedAppListing_Result>("proc_GetVendorInvAwaitedAppListing", anchCompanyIDParameter, vendorNameParameter, totalAppInvAmtParameter, skipParameter, pageSizeParameter, sortByParameter);
        }
    
        public virtual ObjectResult<proc_GetVendorInvAwaitedAppViewListing_Result> proc_GetVendorInvAwaitedAppViewListing(Nullable<long> anchCompanyID, Nullable<int> vendorID, string bucketID, string totalAppInvAmt, Nullable<long> skip, Nullable<int> pageSize, string sortBy)
        {
            var anchCompanyIDParameter = anchCompanyID.HasValue ?
                new ObjectParameter("AnchCompanyID", anchCompanyID) :
                new ObjectParameter("AnchCompanyID", typeof(long));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var bucketIDParameter = bucketID != null ?
                new ObjectParameter("BucketID", bucketID) :
                new ObjectParameter("BucketID", typeof(string));
    
            var totalAppInvAmtParameter = totalAppInvAmt != null ?
                new ObjectParameter("TotalAppInvAmt", totalAppInvAmt) :
                new ObjectParameter("TotalAppInvAmt", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetVendorInvAwaitedAppViewListing_Result>("proc_GetVendorInvAwaitedAppViewListing", anchCompanyIDParameter, vendorIDParameter, bucketIDParameter, totalAppInvAmtParameter, skipParameter, pageSizeParameter, sortByParameter);
        }
    
        public virtual ObjectResult<Proc_GetVendorInvoiceList_Result> Proc_GetVendorInvoiceList(Nullable<int> companyID, string sortBy, Nullable<int> pageSize, Nullable<long> skip)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetVendorInvoiceList_Result>("Proc_GetVendorInvoiceList", companyIDParameter, sortByParameter, pageSizeParameter, skipParameter);
        }
    
        public virtual ObjectResult<Proc_GetVendorList_Result> Proc_GetVendorList(Nullable<int> companyID, string sortBy, Nullable<int> pageSize, Nullable<long> skip, string companyName, string contactNo, string emailId, string vendorStatus)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var vendorStatusParameter = vendorStatus != null ?
                new ObjectParameter("VendorStatus", vendorStatus) :
                new ObjectParameter("VendorStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetVendorList_Result>("Proc_GetVendorList", companyIDParameter, sortByParameter, pageSizeParameter, skipParameter, companyNameParameter, contactNoParameter, emailIdParameter, vendorStatusParameter);
        }
    
        public virtual ObjectResult<proc_GetVendorPaymentDueListing_Result> proc_GetVendorPaymentDueListing(Nullable<long> anchCompanyID, string vendorName, string totalAppInvAmt, Nullable<long> skip, Nullable<int> pageSize, string sortBy)
        {
            var anchCompanyIDParameter = anchCompanyID.HasValue ?
                new ObjectParameter("AnchCompanyID", anchCompanyID) :
                new ObjectParameter("AnchCompanyID", typeof(long));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var totalAppInvAmtParameter = totalAppInvAmt != null ?
                new ObjectParameter("TotalAppInvAmt", totalAppInvAmt) :
                new ObjectParameter("TotalAppInvAmt", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetVendorPaymentDueListing_Result>("proc_GetVendorPaymentDueListing", anchCompanyIDParameter, vendorNameParameter, totalAppInvAmtParameter, skipParameter, pageSizeParameter, sortByParameter);
        }
    
        public virtual ObjectResult<proc_GetVendorPaymentDueViewListing_Result> proc_GetVendorPaymentDueViewListing(Nullable<long> anchCompanyID, Nullable<long> vendorID, string invoiceID, string invoiceAmt, Nullable<long> skip, Nullable<int> pageSize, string sortBy)
        {
            var anchCompanyIDParameter = anchCompanyID.HasValue ?
                new ObjectParameter("AnchCompanyID", anchCompanyID) :
                new ObjectParameter("AnchCompanyID", typeof(long));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var invoiceIDParameter = invoiceID != null ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(string));
    
            var invoiceAmtParameter = invoiceAmt != null ?
                new ObjectParameter("InvoiceAmt", invoiceAmt) :
                new ObjectParameter("InvoiceAmt", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetVendorPaymentDueViewListing_Result>("proc_GetVendorPaymentDueViewListing", anchCompanyIDParameter, vendorIDParameter, invoiceIDParameter, invoiceAmtParameter, skipParameter, pageSizeParameter, sortByParameter);
        }
    
        public virtual ObjectResult<proc_GetViewAvailableForFunding_Result> proc_GetViewAvailableForFunding(Nullable<long> skip, Nullable<int> pageSize, string sortBy, string anchorCompanyName, string invoicetotatalamt, string pONumber, string invoiceNo, Nullable<int> companyId, Nullable<short> isDiscountNull, Nullable<long> vendorID)
        {
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var anchorCompanyNameParameter = anchorCompanyName != null ?
                new ObjectParameter("AnchorCompanyName", anchorCompanyName) :
                new ObjectParameter("AnchorCompanyName", typeof(string));
    
            var invoicetotatalamtParameter = invoicetotatalamt != null ?
                new ObjectParameter("Invoicetotatalamt", invoicetotatalamt) :
                new ObjectParameter("Invoicetotatalamt", typeof(string));
    
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var isDiscountNullParameter = isDiscountNull.HasValue ?
                new ObjectParameter("IsDiscountNull", isDiscountNull) :
                new ObjectParameter("IsDiscountNull", typeof(short));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetViewAvailableForFunding_Result>("proc_GetViewAvailableForFunding", skipParameter, pageSizeParameter, sortByParameter, anchorCompanyNameParameter, invoicetotatalamtParameter, pONumberParameter, invoiceNoParameter, companyIdParameter, isDiscountNullParameter, vendorIDParameter);
        }
    
        public virtual ObjectResult<proc_GetViewAwaitInvoiceApproval_Result> proc_GetViewAwaitInvoiceApproval(Nullable<long> skip, Nullable<int> pageSize, string sortBy, string anchorCompanyName, string invoicetotatalamt, string pONumber, string invoiceNo, Nullable<int> companyId, Nullable<long> vendorID, Nullable<short> isDiscountNull)
        {
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var anchorCompanyNameParameter = anchorCompanyName != null ?
                new ObjectParameter("AnchorCompanyName", anchorCompanyName) :
                new ObjectParameter("AnchorCompanyName", typeof(string));
    
            var invoicetotatalamtParameter = invoicetotatalamt != null ?
                new ObjectParameter("Invoicetotatalamt", invoicetotatalamt) :
                new ObjectParameter("Invoicetotatalamt", typeof(string));
    
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var isDiscountNullParameter = isDiscountNull.HasValue ?
                new ObjectParameter("IsDiscountNull", isDiscountNull) :
                new ObjectParameter("IsDiscountNull", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetViewAwaitInvoiceApproval_Result>("proc_GetViewAwaitInvoiceApproval", skipParameter, pageSizeParameter, sortByParameter, anchorCompanyNameParameter, invoicetotatalamtParameter, pONumberParameter, invoiceNoParameter, companyIdParameter, vendorIDParameter, isDiscountNullParameter);
        }
    
        public virtual ObjectResult<proc_IfEmailIdExists_Result> proc_IfEmailIdExists(string emailId, string type)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_IfEmailIdExists_Result>("proc_IfEmailIdExists", emailIdParameter, typeParameter);
        }
    
        public virtual int Proc_InsertAnchorCompanyDoc(Nullable<long> anchorCompanyId, string fileName, Nullable<long> documentTypeID, Nullable<long> uploadedBy, string localFolderFileName)
        {
            var anchorCompanyIdParameter = anchorCompanyId.HasValue ?
                new ObjectParameter("AnchorCompanyId", anchorCompanyId) :
                new ObjectParameter("AnchorCompanyId", typeof(long));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var documentTypeIDParameter = documentTypeID.HasValue ?
                new ObjectParameter("DocumentTypeID", documentTypeID) :
                new ObjectParameter("DocumentTypeID", typeof(long));
    
            var uploadedByParameter = uploadedBy.HasValue ?
                new ObjectParameter("UploadedBy", uploadedBy) :
                new ObjectParameter("UploadedBy", typeof(long));
    
            var localFolderFileNameParameter = localFolderFileName != null ?
                new ObjectParameter("LocalFolderFileName", localFolderFileName) :
                new ObjectParameter("LocalFolderFileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_InsertAnchorCompanyDoc", anchorCompanyIdParameter, fileNameParameter, documentTypeIDParameter, uploadedByParameter, localFolderFileNameParameter);
        }
    
        public virtual int Proc_InsertErrorDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_InsertErrorDetails");
        }
    
        public virtual int Proc_InsertInvoiceBucketDet(Nullable<long> bucketId, string bucketName, Nullable<int> bucketStatus, Nullable<decimal> discount, Nullable<long> userId, string validToDate, string invoiceIdString, Nullable<int> invoiceStatus)
        {
            var bucketIdParameter = bucketId.HasValue ?
                new ObjectParameter("BucketId", bucketId) :
                new ObjectParameter("BucketId", typeof(long));
    
            var bucketNameParameter = bucketName != null ?
                new ObjectParameter("BucketName", bucketName) :
                new ObjectParameter("BucketName", typeof(string));
    
            var bucketStatusParameter = bucketStatus.HasValue ?
                new ObjectParameter("BucketStatus", bucketStatus) :
                new ObjectParameter("BucketStatus", typeof(int));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var validToDateParameter = validToDate != null ?
                new ObjectParameter("ValidToDate", validToDate) :
                new ObjectParameter("ValidToDate", typeof(string));
    
            var invoiceIdStringParameter = invoiceIdString != null ?
                new ObjectParameter("InvoiceIdString", invoiceIdString) :
                new ObjectParameter("InvoiceIdString", typeof(string));
    
            var invoiceStatusParameter = invoiceStatus.HasValue ?
                new ObjectParameter("InvoiceStatus", invoiceStatus) :
                new ObjectParameter("InvoiceStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_InsertInvoiceBucketDet", bucketIdParameter, bucketNameParameter, bucketStatusParameter, discountParameter, userIdParameter, validToDateParameter, invoiceIdStringParameter, invoiceStatusParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> proc_InsertInvoiceData(string pONumber, Nullable<System.DateTime> pODate, string invoiceNo, Nullable<int> anchorCompID, Nullable<decimal> invoiceAmt, Nullable<System.DateTime> paymentDueDate, Nullable<decimal> approvedAmt, ObjectParameter returnValue, Nullable<long> vendorID)
        {
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            var pODateParameter = pODate.HasValue ?
                new ObjectParameter("PODate", pODate) :
                new ObjectParameter("PODate", typeof(System.DateTime));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var anchorCompIDParameter = anchorCompID.HasValue ?
                new ObjectParameter("AnchorCompID", anchorCompID) :
                new ObjectParameter("AnchorCompID", typeof(int));
    
            var invoiceAmtParameter = invoiceAmt.HasValue ?
                new ObjectParameter("InvoiceAmt", invoiceAmt) :
                new ObjectParameter("InvoiceAmt", typeof(decimal));
    
            var paymentDueDateParameter = paymentDueDate.HasValue ?
                new ObjectParameter("PaymentDueDate", paymentDueDate) :
                new ObjectParameter("PaymentDueDate", typeof(System.DateTime));
    
            var approvedAmtParameter = approvedAmt.HasValue ?
                new ObjectParameter("ApprovedAmt", approvedAmt) :
                new ObjectParameter("ApprovedAmt", typeof(decimal));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("proc_InsertInvoiceData", pONumberParameter, pODateParameter, invoiceNoParameter, anchorCompIDParameter, invoiceAmtParameter, paymentDueDateParameter, approvedAmtParameter, returnValue, vendorIDParameter);
        }
    
        public virtual int proc_InsertVendorData(Nullable<long> anchorCompID, string vendorName, string password, string panNumber, string mIME, string uANNumber, string contactPersonName, string contactPersonDesignation, string emailID, string contactNumber, ObjectParameter returnValue)
        {
            var anchorCompIDParameter = anchorCompID.HasValue ?
                new ObjectParameter("AnchorCompID", anchorCompID) :
                new ObjectParameter("AnchorCompID", typeof(long));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var panNumberParameter = panNumber != null ?
                new ObjectParameter("PanNumber", panNumber) :
                new ObjectParameter("PanNumber", typeof(string));
    
            var mIMEParameter = mIME != null ?
                new ObjectParameter("MIME", mIME) :
                new ObjectParameter("MIME", typeof(string));
    
            var uANNumberParameter = uANNumber != null ?
                new ObjectParameter("UANNumber", uANNumber) :
                new ObjectParameter("UANNumber", typeof(string));
    
            var contactPersonNameParameter = contactPersonName != null ?
                new ObjectParameter("ContactPersonName", contactPersonName) :
                new ObjectParameter("ContactPersonName", typeof(string));
    
            var contactPersonDesignationParameter = contactPersonDesignation != null ?
                new ObjectParameter("ContactPersonDesignation", contactPersonDesignation) :
                new ObjectParameter("ContactPersonDesignation", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertVendorData", anchorCompIDParameter, vendorNameParameter, passwordParameter, panNumberParameter, mIMEParameter, uANNumberParameter, contactPersonNameParameter, contactPersonDesignationParameter, emailIDParameter, contactNumberParameter, returnValue);
        }
    
        public virtual int proc_InsertVendorDet(Nullable<long> vendorID, string vendorName, string contactNumber, string emailID, Nullable<int> maxLimit, Nullable<int> vendorStatus, Nullable<int> userId, string contactPersonDesignation, string contactPersonEmail, Nullable<int> contactPersonNumber, string pANNumber, string contactPersonName)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var maxLimitParameter = maxLimit.HasValue ?
                new ObjectParameter("MaxLimit", maxLimit) :
                new ObjectParameter("MaxLimit", typeof(int));
    
            var vendorStatusParameter = vendorStatus.HasValue ?
                new ObjectParameter("VendorStatus", vendorStatus) :
                new ObjectParameter("VendorStatus", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var contactPersonDesignationParameter = contactPersonDesignation != null ?
                new ObjectParameter("ContactPersonDesignation", contactPersonDesignation) :
                new ObjectParameter("ContactPersonDesignation", typeof(string));
    
            var contactPersonEmailParameter = contactPersonEmail != null ?
                new ObjectParameter("ContactPersonEmail", contactPersonEmail) :
                new ObjectParameter("ContactPersonEmail", typeof(string));
    
            var contactPersonNumberParameter = contactPersonNumber.HasValue ?
                new ObjectParameter("ContactPersonNumber", contactPersonNumber) :
                new ObjectParameter("ContactPersonNumber", typeof(int));
    
            var pANNumberParameter = pANNumber != null ?
                new ObjectParameter("PANNumber", pANNumber) :
                new ObjectParameter("PANNumber", typeof(string));
    
            var contactPersonNameParameter = contactPersonName != null ?
                new ObjectParameter("ContactPersonName", contactPersonName) :
                new ObjectParameter("ContactPersonName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertVendorDet", vendorIDParameter, vendorNameParameter, contactNumberParameter, emailIDParameter, maxLimitParameter, vendorStatusParameter, userIdParameter, contactPersonDesignationParameter, contactPersonEmailParameter, contactPersonNumberParameter, pANNumberParameter, contactPersonNameParameter);
        }
    
        public virtual int Proc_InsertVendorDocDet(Nullable<long> vendorID, string fileName, Nullable<long> documentTypeID, Nullable<long> uploadedBy, string localFolderFileName)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var documentTypeIDParameter = documentTypeID.HasValue ?
                new ObjectParameter("DocumentTypeID", documentTypeID) :
                new ObjectParameter("DocumentTypeID", typeof(long));
    
            var uploadedByParameter = uploadedBy.HasValue ?
                new ObjectParameter("UploadedBy", uploadedBy) :
                new ObjectParameter("UploadedBy", typeof(long));
    
            var localFolderFileNameParameter = localFolderFileName != null ?
                new ObjectParameter("LocalFolderFileName", localFolderFileName) :
                new ObjectParameter("LocalFolderFileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_InsertVendorDocDet", vendorIDParameter, fileNameParameter, documentTypeIDParameter, uploadedByParameter, localFolderFileNameParameter);
        }
    
        public virtual ObjectResult<proc_LoginCompany_Result> proc_LoginCompany(string login_Id, string password, string flag)
        {
            var login_IdParameter = login_Id != null ?
                new ObjectParameter("Login_Id", login_Id) :
                new ObjectParameter("Login_Id", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_LoginCompany_Result>("proc_LoginCompany", login_IdParameter, passwordParameter, flagParameter);
        }
    
        public virtual ObjectResult<Proc_MaintinSearchHistory_Result> Proc_MaintinSearchHistory(string pageName, Nullable<int> companyId, string columnName, string searchedValue, Nullable<int> maxSearchLimit)
        {
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var columnNameParameter = columnName != null ?
                new ObjectParameter("ColumnName", columnName) :
                new ObjectParameter("ColumnName", typeof(string));
    
            var searchedValueParameter = searchedValue != null ?
                new ObjectParameter("SearchedValue", searchedValue) :
                new ObjectParameter("SearchedValue", typeof(string));
    
            var maxSearchLimitParameter = maxSearchLimit.HasValue ?
                new ObjectParameter("MaxSearchLimit", maxSearchLimit) :
                new ObjectParameter("MaxSearchLimit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_MaintinSearchHistory_Result>("Proc_MaintinSearchHistory", pageNameParameter, companyIdParameter, columnNameParameter, searchedValueParameter, maxSearchLimitParameter);
        }
    
        public virtual int Proc_MapInvoiceBucket(Nullable<long> bucketID, Nullable<long> invoiceID, string invoiceIdString, Nullable<int> bucketStatus, Nullable<long> bucketCreatedBy, Nullable<long> returnBucketID, string bucketName)
        {
            var bucketIDParameter = bucketID.HasValue ?
                new ObjectParameter("BucketID", bucketID) :
                new ObjectParameter("BucketID", typeof(long));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(long));
    
            var invoiceIdStringParameter = invoiceIdString != null ?
                new ObjectParameter("InvoiceIdString", invoiceIdString) :
                new ObjectParameter("InvoiceIdString", typeof(string));
    
            var bucketStatusParameter = bucketStatus.HasValue ?
                new ObjectParameter("BucketStatus", bucketStatus) :
                new ObjectParameter("BucketStatus", typeof(int));
    
            var bucketCreatedByParameter = bucketCreatedBy.HasValue ?
                new ObjectParameter("BucketCreatedBy", bucketCreatedBy) :
                new ObjectParameter("BucketCreatedBy", typeof(long));
    
            var returnBucketIDParameter = returnBucketID.HasValue ?
                new ObjectParameter("ReturnBucketID", returnBucketID) :
                new ObjectParameter("ReturnBucketID", typeof(long));
    
            var bucketNameParameter = bucketName != null ?
                new ObjectParameter("BucketName", bucketName) :
                new ObjectParameter("BucketName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_MapInvoiceBucket", bucketIDParameter, invoiceIDParameter, invoiceIdStringParameter, bucketStatusParameter, bucketCreatedByParameter, returnBucketIDParameter, bucketNameParameter);
        }
    
        public virtual int proc_MarkAllReadAnchorNotifications(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_MarkAllReadAnchorNotifications", userIDParameter);
        }
    
        public virtual int proc_MarkAllReadNotifications(Nullable<long> userID, string role)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var roleParameter = role != null ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_MarkAllReadNotifications", userIDParameter, roleParameter);
        }
    
        public virtual ObjectResult<proc_OutputUser_Result> proc_OutputUser(Nullable<long> skip, Nullable<int> pageSize, string sortBy, string userName, string roleAccess, Nullable<long> companyID)
        {
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var roleAccessParameter = roleAccess != null ?
                new ObjectParameter("RoleAccess", roleAccess) :
                new ObjectParameter("RoleAccess", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_OutputUser_Result>("proc_OutputUser", skipParameter, pageSizeParameter, sortByParameter, userNameParameter, roleAccessParameter, companyIDParameter);
        }
    
        public virtual int proc_RegisterCompanay(string company_name, string login_Id, string password, string address, Nullable<int> interestedAs, Nullable<int> companyType, string pan_number, string contact_Title, string contact_Name, string contact_Designation, string contact_email, string contact_mobile, string contact_Comments, Nullable<bool> isActive, Nullable<bool> isDelete, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updateDate, Nullable<int> createdBy, Nullable<int> updatedBy)
        {
            var company_nameParameter = company_name != null ?
                new ObjectParameter("Company_name", company_name) :
                new ObjectParameter("Company_name", typeof(string));
    
            var login_IdParameter = login_Id != null ?
                new ObjectParameter("Login_Id", login_Id) :
                new ObjectParameter("Login_Id", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var interestedAsParameter = interestedAs.HasValue ?
                new ObjectParameter("InterestedAs", interestedAs) :
                new ObjectParameter("InterestedAs", typeof(int));
    
            var companyTypeParameter = companyType.HasValue ?
                new ObjectParameter("CompanyType", companyType) :
                new ObjectParameter("CompanyType", typeof(int));
    
            var pan_numberParameter = pan_number != null ?
                new ObjectParameter("Pan_number", pan_number) :
                new ObjectParameter("Pan_number", typeof(string));
    
            var contact_TitleParameter = contact_Title != null ?
                new ObjectParameter("Contact_Title", contact_Title) :
                new ObjectParameter("Contact_Title", typeof(string));
    
            var contact_NameParameter = contact_Name != null ?
                new ObjectParameter("Contact_Name", contact_Name) :
                new ObjectParameter("Contact_Name", typeof(string));
    
            var contact_DesignationParameter = contact_Designation != null ?
                new ObjectParameter("Contact_Designation", contact_Designation) :
                new ObjectParameter("Contact_Designation", typeof(string));
    
            var contact_emailParameter = contact_email != null ?
                new ObjectParameter("Contact_email", contact_email) :
                new ObjectParameter("Contact_email", typeof(string));
    
            var contact_mobileParameter = contact_mobile != null ?
                new ObjectParameter("Contact_mobile", contact_mobile) :
                new ObjectParameter("Contact_mobile", typeof(string));
    
            var contact_CommentsParameter = contact_Comments != null ?
                new ObjectParameter("Contact_Comments", contact_Comments) :
                new ObjectParameter("Contact_Comments", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_RegisterCompanay", company_nameParameter, login_IdParameter, passwordParameter, addressParameter, interestedAsParameter, companyTypeParameter, pan_numberParameter, contact_TitleParameter, contact_NameParameter, contact_DesignationParameter, contact_emailParameter, contact_mobileParameter, contact_CommentsParameter, isActiveParameter, isDeleteParameter, createdDateParameter, updateDateParameter, createdByParameter, updatedByParameter);
        }
    
        public virtual int proc_RemoveVendorRecord(Nullable<long> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_RemoveVendorRecord", vendorIDParameter);
        }
    
        public virtual ObjectResult<proc_RoleAccessDropDown_Result> proc_RoleAccessDropDown()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_RoleAccessDropDown_Result>("proc_RoleAccessDropDown");
        }
    
        public virtual int proc_UpdateInvoice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateInvoice");
        }
    
        public virtual int proc_UpdatePassword(string role, string email, string password)
        {
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdatePassword", roleParameter, emailParameter, passwordParameter);
        }
    
        public virtual int proc_UpdateUser(Nullable<long> userID, string name, string email, string mobile, string designation, string rolesAccess, Nullable<long> updatedBy)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var rolesAccessParameter = rolesAccess != null ?
                new ObjectParameter("RolesAccess", rolesAccess) :
                new ObjectParameter("RolesAccess", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateUser", userIDParameter, nameParameter, emailParameter, mobileParameter, designationParameter, rolesAccessParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<proc_UploadVendorListing_Result> proc_UploadVendorListing(string vendorId, string pOName, string invoiceNO)
        {
            var vendorIdParameter = vendorId != null ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(string));
    
            var pONameParameter = pOName != null ?
                new ObjectParameter("POName", pOName) :
                new ObjectParameter("POName", typeof(string));
    
            var invoiceNOParameter = invoiceNO != null ?
                new ObjectParameter("InvoiceNO", invoiceNO) :
                new ObjectParameter("InvoiceNO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_UploadVendorListing_Result>("proc_UploadVendorListing", vendorIdParameter, pONameParameter, invoiceNOParameter);
        }
    
        public virtual ObjectResult<proc_VendorsDropDown_Result> proc_VendorsDropDown(Nullable<long> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_VendorsDropDown_Result>("proc_VendorsDropDown", companyIDParameter);
        }
    
        public virtual ObjectResult<recievabledue_Result> recievabledue(Nullable<long> vendorID, Nullable<long> skip, Nullable<int> pageSize, string sortBy, Nullable<int> anchorid, string anchorname, string totalInvoiceAmount)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var anchoridParameter = anchorid.HasValue ?
                new ObjectParameter("Anchorid", anchorid) :
                new ObjectParameter("Anchorid", typeof(int));
    
            var anchornameParameter = anchorname != null ?
                new ObjectParameter("Anchorname", anchorname) :
                new ObjectParameter("Anchorname", typeof(string));
    
            var totalInvoiceAmountParameter = totalInvoiceAmount != null ?
                new ObjectParameter("TotalInvoiceAmount", totalInvoiceAmount) :
                new ObjectParameter("TotalInvoiceAmount", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<recievabledue_Result>("recievabledue", vendorIDParameter, skipParameter, pageSizeParameter, sortByParameter, anchoridParameter, anchornameParameter, totalInvoiceAmountParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_getEmployees_Result> sp_getEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getEmployees_Result>("sp_getEmployees");
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int SP_SaveLogManagement(string controllerName, string actionName, string message, string errorLine, string userID)
        {
            var controllerNameParameter = controllerName != null ?
                new ObjectParameter("ControllerName", controllerName) :
                new ObjectParameter("ControllerName", typeof(string));
    
            var actionNameParameter = actionName != null ?
                new ObjectParameter("ActionName", actionName) :
                new ObjectParameter("ActionName", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var errorLineParameter = errorLine != null ?
                new ObjectParameter("ErrorLine", errorLine) :
                new ObjectParameter("ErrorLine", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SaveLogManagement", controllerNameParameter, actionNameParameter, messageParameter, errorLineParameter, userIDParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UPDATEFUNDING(Nullable<long> autoFudngId, Nullable<decimal> discuntRate, Nullable<System.DateTime> discuntVlidDate)
        {
            var autoFudngIdParameter = autoFudngId.HasValue ?
                new ObjectParameter("AutoFudngId", autoFudngId) :
                new ObjectParameter("AutoFudngId", typeof(long));
    
            var discuntRateParameter = discuntRate.HasValue ?
                new ObjectParameter("DiscuntRate", discuntRate) :
                new ObjectParameter("DiscuntRate", typeof(decimal));
    
            var discuntVlidDateParameter = discuntVlidDate.HasValue ?
                new ObjectParameter("DiscuntVlidDate", discuntVlidDate) :
                new ObjectParameter("DiscuntVlidDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDATEFUNDING", autoFudngIdParameter, discuntRateParameter, discuntVlidDateParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> Proc_GetFinoassistMinPaymentDate(Nullable<long> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("Proc_GetFinoassistMinPaymentDate", vendorIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetInvoiceListByAnchor_Result> Proc_GetInvoiceListByAnchor(Nullable<long> vendorId, Nullable<decimal> sumAssuredAmount, Nullable<long> skip, Nullable<int> pageSize, string sortBy, Nullable<System.DateTime> fundingDate, Nullable<decimal> discount, string anchorCompanyID)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(long));
    
            var sumAssuredAmountParameter = sumAssuredAmount.HasValue ?
                new ObjectParameter("sumAssuredAmount", sumAssuredAmount) :
                new ObjectParameter("sumAssuredAmount", typeof(decimal));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var fundingDateParameter = fundingDate.HasValue ?
                new ObjectParameter("fundingDate", fundingDate) :
                new ObjectParameter("fundingDate", typeof(System.DateTime));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("discount", discount) :
                new ObjectParameter("discount", typeof(decimal));
    
            var anchorCompanyIDParameter = anchorCompanyID != null ?
                new ObjectParameter("AnchorCompanyID", anchorCompanyID) :
                new ObjectParameter("AnchorCompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetInvoiceListByAnchor_Result>("Proc_GetInvoiceListByAnchor", vendorIdParameter, sumAssuredAmountParameter, skipParameter, pageSizeParameter, sortByParameter, fundingDateParameter, discountParameter, anchorCompanyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> proc_GetMaxAvailableAmtByAnchorComp(Nullable<int> vedorID, string anchorCompanyID)
        {
            var vedorIDParameter = vedorID.HasValue ?
                new ObjectParameter("VedorID", vedorID) :
                new ObjectParameter("VedorID", typeof(int));
    
            var anchorCompanyIDParameter = anchorCompanyID != null ?
                new ObjectParameter("AnchorCompanyID", anchorCompanyID) :
                new ObjectParameter("AnchorCompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("proc_GetMaxAvailableAmtByAnchorComp", vedorIDParameter, anchorCompanyIDParameter);
        }
    
        public virtual ObjectResult<proc_UploadAllVendorListing_Result> proc_UploadAllVendorListing(string vendorId, Nullable<long> anchorCompID, Nullable<long> companyID, string sortBy, Nullable<int> pageSize, Nullable<long> skip, string pOName, string invoiceDate, string invoiceNO, string invoiceAmt, string approvedAmt, string invoiceStatus, string paymentDays)
        {
            var vendorIdParameter = vendorId != null ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(string));
    
            var anchorCompIDParameter = anchorCompID.HasValue ?
                new ObjectParameter("AnchorCompID", anchorCompID) :
                new ObjectParameter("AnchorCompID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var pONameParameter = pOName != null ?
                new ObjectParameter("POName", pOName) :
                new ObjectParameter("POName", typeof(string));
    
            var invoiceDateParameter = invoiceDate != null ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(string));
    
            var invoiceNOParameter = invoiceNO != null ?
                new ObjectParameter("InvoiceNO", invoiceNO) :
                new ObjectParameter("InvoiceNO", typeof(string));
    
            var invoiceAmtParameter = invoiceAmt != null ?
                new ObjectParameter("InvoiceAmt", invoiceAmt) :
                new ObjectParameter("InvoiceAmt", typeof(string));
    
            var approvedAmtParameter = approvedAmt != null ?
                new ObjectParameter("ApprovedAmt", approvedAmt) :
                new ObjectParameter("ApprovedAmt", typeof(string));
    
            var invoiceStatusParameter = invoiceStatus != null ?
                new ObjectParameter("InvoiceStatus", invoiceStatus) :
                new ObjectParameter("InvoiceStatus", typeof(string));
    
            var paymentDaysParameter = paymentDays != null ?
                new ObjectParameter("PaymentDays", paymentDays) :
                new ObjectParameter("PaymentDays", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_UploadAllVendorListing_Result>("proc_UploadAllVendorListing", vendorIdParameter, anchorCompIDParameter, companyIDParameter, sortByParameter, pageSizeParameter, skipParameter, pONameParameter, invoiceDateParameter, invoiceNOParameter, invoiceAmtParameter, approvedAmtParameter, invoiceStatusParameter, paymentDaysParameter);
        }
    
        public virtual ObjectResult<Get_HolidayList_Details_Result> Get_HolidayList_Details(string sortBy, Nullable<int> pageSize, Nullable<long> skip, string reason)
        {
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_HolidayList_Details_Result>("Get_HolidayList_Details", sortByParameter, pageSizeParameter, skipParameter, reasonParameter);
        }
    }
}
