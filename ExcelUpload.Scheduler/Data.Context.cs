//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExcelUpload.Scheduler
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Finocart_V1Entities8 : DbContext
    {
        public Finocart_V1Entities8()
            : base("name=Finocart_V1Entities8")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<LookupDetail> LookupDetails { get; set; }
        public virtual DbSet<ModuleMaster> ModuleMasters { get; set; }
        public virtual DbSet<VendorAssociatedCompany> VendorAssociatedCompanies { get; set; }
        public virtual DbSet<VendorRegisterMailTemplate> VendorRegisterMailTemplates { get; set; }
        public virtual DbSet<InvoiceMailTemplate> InvoiceMailTemplates { get; set; }
        public virtual DbSet<UploadExcelPath> UploadExcelPaths { get; set; }
    
        public virtual int proc_InsertInvoiceData(string pONumber, Nullable<System.DateTime> pODate, string invoiceNo, Nullable<int> anchorCompID, Nullable<decimal> invoiceAmt, Nullable<System.DateTime> paymentDueDate, Nullable<decimal> approvedAmt, ObjectParameter returnValue, Nullable<long> vendorID)
        {
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            var pODateParameter = pODate.HasValue ?
                new ObjectParameter("PODate", pODate) :
                new ObjectParameter("PODate", typeof(System.DateTime));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var anchorCompIDParameter = anchorCompID.HasValue ?
                new ObjectParameter("AnchorCompID", anchorCompID) :
                new ObjectParameter("AnchorCompID", typeof(int));
    
            var invoiceAmtParameter = invoiceAmt.HasValue ?
                new ObjectParameter("InvoiceAmt", invoiceAmt) :
                new ObjectParameter("InvoiceAmt", typeof(decimal));
    
            var paymentDueDateParameter = paymentDueDate.HasValue ?
                new ObjectParameter("PaymentDueDate", paymentDueDate) :
                new ObjectParameter("PaymentDueDate", typeof(System.DateTime));
    
            var approvedAmtParameter = approvedAmt.HasValue ?
                new ObjectParameter("ApprovedAmt", approvedAmt) :
                new ObjectParameter("ApprovedAmt", typeof(decimal));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertInvoiceData", pONumberParameter, pODateParameter, invoiceNoParameter, anchorCompIDParameter, invoiceAmtParameter, paymentDueDateParameter, approvedAmtParameter, returnValue, vendorIDParameter);
        }
    
        public virtual int proc_InsertVendorData(Nullable<long> anchorCompID, string vendorName, string password, string panNumber, string mIME, string uANNumber, string contactPersonName, string contactPersonDesignation, string emailID, string contactNumber, ObjectParameter returnValue)
        {
            var anchorCompIDParameter = anchorCompID.HasValue ?
                new ObjectParameter("AnchorCompID", anchorCompID) :
                new ObjectParameter("AnchorCompID", typeof(long));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var panNumberParameter = panNumber != null ?
                new ObjectParameter("PanNumber", panNumber) :
                new ObjectParameter("PanNumber", typeof(string));
    
            var mIMEParameter = mIME != null ?
                new ObjectParameter("MIME", mIME) :
                new ObjectParameter("MIME", typeof(string));
    
            var uANNumberParameter = uANNumber != null ?
                new ObjectParameter("UANNumber", uANNumber) :
                new ObjectParameter("UANNumber", typeof(string));
    
            var contactPersonNameParameter = contactPersonName != null ?
                new ObjectParameter("ContactPersonName", contactPersonName) :
                new ObjectParameter("ContactPersonName", typeof(string));
    
            var contactPersonDesignationParameter = contactPersonDesignation != null ?
                new ObjectParameter("ContactPersonDesignation", contactPersonDesignation) :
                new ObjectParameter("ContactPersonDesignation", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertVendorData", anchorCompIDParameter, vendorNameParameter, passwordParameter, panNumberParameter, mIMEParameter, uANNumberParameter, contactPersonNameParameter, contactPersonDesignationParameter, emailIDParameter, contactNumberParameter, returnValue);
        }
    
        public virtual int proc_UpdateExcelData(Nullable<long> iD, string logPath)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var logPathParameter = logPath != null ?
                new ObjectParameter("LogPath", logPath) :
                new ObjectParameter("LogPath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateExcelData", iDParameter, logPathParameter);
        }
    
        public virtual ObjectResult<string> Proc_getVendorRegisterEmailTemplate(string lookupFor)
        {
            var lookupForParameter = lookupFor != null ?
                new ObjectParameter("LookupFor", lookupFor) :
                new ObjectParameter("LookupFor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Proc_getVendorRegisterEmailTemplate", lookupForParameter);
        }
    
        public virtual ObjectResult<Proc_getLookupDetailsByGroup_Result> Proc_getLookupDetailsByGroup(string lookupFor)
        {
            var lookupForParameter = lookupFor != null ?
                new ObjectParameter("LookupFor", lookupFor) :
                new ObjectParameter("LookupFor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_getLookupDetailsByGroup_Result>("Proc_getLookupDetailsByGroup", lookupForParameter);
        }
    
        public virtual int proc_InsertExcelData(string fullPath, string fileName, string upload, Nullable<long> anchorCompID, string companyName, string logPath, ObjectParameter returnValue)
        {
            var fullPathParameter = fullPath != null ?
                new ObjectParameter("FullPath", fullPath) :
                new ObjectParameter("FullPath", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var uploadParameter = upload != null ?
                new ObjectParameter("Upload", upload) :
                new ObjectParameter("Upload", typeof(string));
    
            var anchorCompIDParameter = anchorCompID.HasValue ?
                new ObjectParameter("AnchorCompID", anchorCompID) :
                new ObjectParameter("AnchorCompID", typeof(long));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var logPathParameter = logPath != null ?
                new ObjectParameter("LogPath", logPath) :
                new ObjectParameter("LogPath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertExcelData", fullPathParameter, fileNameParameter, uploadParameter, anchorCompIDParameter, companyNameParameter, logPathParameter, returnValue);
        }
    }
}
